vocabulary deel1Voc{
	type Room
	type Door
	type Key
	
	Links(Door, Room, Room)
	Fits(Key,Door)
	
	type Action // (Action is Open, Close, Go, Pickup or Drop)
	
	Open:Action
	Close:Action
	Go:Action
	PickUp:Action
	Drop:Action
	
	IsOpen(Door) 		// Whether or not a door is open at Time
	PersonIn(Room) 		// Expresses in which room the person is
	KeyIn(Key, Room) 	// Where a key is at a certain time
	Do(Action) 			// Expresses which actions are executed
	Has(Key) 			// Which key he/she is carrying
	
	/********************************
	*	Declarations -- ACTIONS 	*
	********************************/
	HasAfter(Key)
	ClosedDoor(Door)
	OpenedDoor(Door)
	NewRoom(Room)
	// It might be useful to declare some new symbols which represent the various actions and objects involved. (hint: check the exercise sessions)
	
		
	/********************************
	*	Declarations -- OTHER	 	*
	********************************/
	
	// If you use addition symbols, put them here
}

theory deel1Theo: deel1Voc{

	/********************************
	*	ACTIONS -- Limitations		*
	* 1. General action limitation	*
	********************************/
	

	/********************************
	*	ACTIONS -- Limitations		*
	* 2. Walking					*
	********************************/
	

	/********************************
	*	ACTIONS -- Limitations		*
	* 3. Opening and closing		*
	********************************/
	
	
	/********************************
	*	ACTIONS -- Limitations		*
	* 4. Pickup and Drop			*
	********************************/
	//! Key : Has(Key) => ~Do(PickUp).
	//
	//Do(PickUp) => ?Room:?Key : (PersonIn(Room) & KeyIn(Key, Room) & HasAfter(Key)).
	//Do(PickUp) & HasAfter(key) => (PersonIn(room) & KeyIn(key,room)).
	//~Do(PickUp) => ~? key : HasAfter(key).
	//Do(PickUp) & Key(key) & PersonIn(room) & KeyIn(key,room).
	//Do(PickUp) : PersonIn(Room)=>  => !key : KeyIn(key, room)).
	//Do(Drop) => ? key : Has(key).
	
	//(~Do(action) & action = pickup) => ~! key : HasAfter(key).
	
	//?=<1 key : Has(key).
	
	?=<1 key : HasAfter(key).
	Do(PickUp) <=> ?1 key : HasAfter(key).
	Do(PickUp) => ~? key : Has(key).
	//(Do(PickUp) & PersonIn(room) & KeyIn(key,room)) => ?key1 : HasAfter(key1).
	(Do(PickUp) & HasAfter(key)) => ?room:PersonIn(room) & KeyIn(key,room).
	
	Do(Drop) => ?key : Has(key).
	
	NewRoom(room) => Do(Go).
	Do(Go) => ?1 room: NewRoom(room).
	(Do(Go) & NewRoom(room)) => ?door room2: (PersonIn(room2) & IsOpen(door) & (Links(door, room, room2) | Links(door, room2, room))).
	
	Do(Close) => ?1 door : ClosedDoor(door).
	ClosedDoor(door) => Do(Close).
	(Do(Close) & ClosedDoor(door)) => ? room2 key room: (PersonIn(room) & Has(key) & Fits(key, door) & (Links(door, room, room2) | Links(door, room2, room))).
	
	Do(Open) => ?1 door: OpenedDoor(door).
	OpenedDoor(door) => Do(Open).
	(Do(Open) & OpenedDoor(door) ) => ? room2 key room: (PersonIn(room) & Has(key) & Fits(key, door) & (Links(door, room, room2) | Links(door, room2, room))).
}
